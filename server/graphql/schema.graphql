"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Mutation @middleware(checks: ["auth:api", "admin"]) {
    createUser(email: String!): User @create
    deleteUser(id: ID!): User @delete

    createProject(title: String!): Project
        @field(resolver: "App\\GraphQL\\Mutations\\ProjectMutator@create")
    updateProject(id: ID!, title: String!): Project @update
    deleteProject(id: ID!): Project @delete

    createTask(
        project_id: Int!
        title: String!
        content: String!
        price_total: Int
        price: Int
        status: TaskStatus
    ): Task @field(resolver: "App\\GraphQL\\Mutations\\TaskMutator@create")
    updateTask(
        id: ID!
        project_id: Int!
        title: String!
        content: String!
        price_total: Int
        price: Int
        status: TaskStatus!
    ): Task @field(resolver: "App\\GraphQL\\Mutations\\TaskMutator@update")
    deleteTask(id: ID!): Task @delete

    addUserToProject(project_id: Int!, user_id: Int!): Project
        @field(resolver: "App\\GraphQL\\Mutations\\ProjectMutator@addUser")
    removeUserFromProject(project_id: Int!, user_id: Int!): Project
        @field(resolver: "App\\GraphQL\\Mutations\\ProjectMutator@removeUser")
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    createComment(task_id: Int!, content: String!): Comment
        @field(resolver: "App\\GraphQL\\Mutations\\CommentMutator@create")
    updateComment(id: ID!, content: String!): Comment
        @field(resolver: "App\\GraphQL\\Mutations\\CommentMutator@update")
    deleteComment(id: ID!): Comment @delete
}

extend type Mutation {
    login(id_token: String!): String!
        @field(resolver: "App\\GraphQL\\Mutations\\AccountMutator@login")
}

type Query @middleware(checks: ["auth:api"]) {
    users: [User!]! @all
    me: User @auth

    project(id: ID @eq): Project @find
    projects: [Project!]! @all

    task(id: ID @eq): Task @find(model: "App\\Models\\Task")
    tasks: [Task!]! @paginate
}

enum UserRole {
    ADMIN
    ROCKSTAR
}

enum TaskStatus {
    OPEN
    CHECKS
    CLOSED
}

type User {
    id: ID!
    name: String!
    email: String!
    avatar: String!
    role: UserRole!
    created_at: DateTime!
    updated_at: DateTime!
    own_projects: [Project!]! @hasMany(relation: "own_projects")
    projects: [Project!]! @belongsToMany
}

type Project {
    id: ID!
    title: String!
    author: User @belongsTo
    tasks: [Task!]! @hasMany
    users: [User!]! @belongsToMany
}

type Task {
    id: ID!
    title: String!
    content: String!
    price_total: Int
    price: Int
    status: TaskStatus
    project: Project @belongsTo
    comments: [Comment!]! @hasMany
    author: User @belongsTo
}

type Comment {
    id: ID!
    task_id: Int!
    content: String!
    author: User @belongsTo
}
