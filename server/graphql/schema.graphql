"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Mutation @middleware(checks: ["auth:api", "admin"]) {
    createUser(email: String! @rules(apply: ["required", "email"])): User
        @create
    deleteUser(id: ID!): User @delete

    createProject(title: String!): Project
        @field(resolver: "App\\GraphQL\\Mutations\\ProjectMutator@create")
    deleteProject(id: ID!): Project @delete

    addUserToProject(project_id: ID!, user_id: ID!): Project
        @field(resolver: "App\\GraphQL\\Mutations\\ProjectMutator@addUser")
    removeUserFromProject(project_id: ID!, user_id: ID!): Project
        @field(resolver: "App\\GraphQL\\Mutations\\ProjectMutator@removeUser")
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    createTask(
        project_id: ID!
        content: String!
        price_total: String
        price: String
    ): Task @field(resolver: "App\\GraphQL\\Mutations\\TaskMutator@create")
    updateTask(
        id: ID!
        content: String
        price_total: String
        price: String
        status: TaskStatus
    ): Task @field(resolver: "App\\GraphQL\\Mutations\\TaskMutator@update")
    deleteTask(id: ID!): Task @delete
}

extend type Mutation {
    login(id_token: String!): String!
        @field(resolver: "App\\GraphQL\\Mutations\\AccountMutator@login")
    createAdmin(id_token: String!): String!
        @field(resolver: "App\\GraphQL\\Mutations\\AccountMutator@createAdmin")
}

type Query @middleware(checks: ["auth:api"]) {
    users: [User!]!
    me: User @auth

    project(id: ID @eq): Project @find

    task(id: ID @eq): Task @find
    tasks: [Task!]! @paginate
}

enum UserRole {
    ADMIN
    ROCKSTAR
}

enum TaskStatus {
    OPEN
    CHECKS
    CLOSED
}

type User {
    id: ID!
    name: String!
    email: String!
    avatar: String!
    role: UserRole!
    own_projects: [Project!]! @hasMany(relation: "own_projects")
    projects: [Project!]! @belongsToMany
    created_at: DateTime!
    updated_at: DateTime!
}

type Project {
    id: ID!
    title: String!
    author: User @belongsTo
    tasks: [Task!]! @hasMany
    users: [User!]! @belongsToMany
    created_at: DateTime!
    updated_at: DateTime!
}

type Task {
    id: ID!
    content: String!
    price_total: String
    price: String
    status: TaskStatus
    project: Project @belongsTo
    author: User @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}
